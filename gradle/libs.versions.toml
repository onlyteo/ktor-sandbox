### VERSIONS ###
[versions]
kotlinx-coroutines = "1.10.2"
ktor = "3.2.0"
jackson = "2.19.1"
logback = "1.5.18"
logstash-logback = "8.1"
micrometer = "1.15.0"
opentelemetry = "1.52.0"
opentelemetry-instrumentation = "2.17.0"
opentelemetry-instrumentation-ktor = "2.16.0-alpha"
hoplite = "2.9.0"
jetbrains-exposed = "0.61.0"
jooq = "3.20.5"
ktorm = "4.1.1"
flyway = "11.10.0"
h2database = "2.3.232"
zaxxer-hikari-cp = "6.3.0"
postgresql-driver = "42.7.7"
kafka = "4.0.0"
webjars-jquery = "3.7.1"
webjars-bootstrap = "5.3.7"
webjars-popper = "2.11.7"
webjars-locator = "0.52"
webjars-fontawesome = "6.7.2"
thymeleaf-layout-dialect = "3.4.0"
graphql = "8.8.1"
junit = "5.13.2"
kotest = "5.9.1"
mockk = "1.14.4"
testcontainers = "1.21.3"

### LIBRARIES ###
[libraries]
# Kotlin
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit" }
# KotlinX
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
# Ktor server
ktor-bom = { module = "io.ktor:ktor-bom", version.ref = "ktor" }
ktor-server-core = { module = "io.ktor:ktor-server-core" }
ktor-server-cors = { module = "io.ktor:ktor-server-cors" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty" }
ktor-server-content-negotiation = { module = "io.ktor:ktor-server-content-negotiation" }
ktor-server-request-validation = { module = "io.ktor:ktor-server-request-validation" }
ktor-server-status-pages = { module = "io.ktor:ktor-server-status-pages" }
ktor-server-config-yaml = { module = "io.ktor:ktor-server-config-yaml" }
ktor-server-webjars = { module = "io.ktor:ktor-server-webjars" }
ktor-server-thymeleaf = { module = "io.ktor:ktor-server-thymeleaf" }
ktor-server-micrometer = { module = "io.ktor:ktor-server-metrics-micrometer" }
ktor-server-call-logging = { module = "io.ktor:ktor-server-call-logging" }
ktor-server-sessions = { module = "io.ktor:ktor-server-sessions" }
ktor-server-auth = { module = "io.ktor:ktor-server-auth" }
ktor-server-auth-jwt = { module = "io.ktor:ktor-server-auth-jwt" }
ktor-server-websockets = { module = "io.ktor:ktor-server-websockets" }
ktor-server-test-host = { module = "io.ktor:ktor-server-test-host" }
# Ktor client
ktor-client-core = { module = "io.ktor:ktor-client-core" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation" }
ktor-client-websockets = { module = "io.ktor:ktor-client-websockets" }
# Ktor other
ktor-serialization-jackson = { module = "io.ktor:ktor-serialization-jackson" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json" }
# Spring Boot
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-boot-starter-jdbc = { module = "org.springframework.boot:spring-boot-starter-jdbc" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation" }
spring-boot-starter-thymeleaf = { module = "org.springframework.boot:spring-boot-starter-thymeleaf" }
# Spring Security
spring-security-oauth2-authorization-server = { module = "org.springframework.security:spring-security-oauth2-authorization-server" }
# Jackson
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jackson-dataformat-csv = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-csv", version.ref = "jackson" }
# Logback
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
logstash-logback-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstash-logback" }
# Micrometer
micrometer-prometheus-registry = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "micrometer" }
# OpenTelemetry
opentelemetry-kotlin = { module = "io.opentelemetry:opentelemetry-extension-kotlin", version.ref = "opentelemetry" }
opentelemetry-instrumentation-ktor = { module = "io.opentelemetry.instrumentation:opentelemetry-ktor-2.0", version.ref = "opentelemetry-instrumentation-ktor" }
opentelemetry-instrumentation-annotations = { module = "io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations", version.ref = "opentelemetry-instrumentation" }
opentelemetry-java-agent = { module = "io.opentelemetry.javaagent:opentelemetry-javaagent", version.ref = "opentelemetry-instrumentation" }
# Hoplite
hoplite-yaml = { module = "com.sksamuel.hoplite:hoplite-yaml", version.ref = "hoplite" }
# Exposed
jetbrains-exposed-jdbc = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "jetbrains-exposed" }
jetbrains-exposed-dao = { module = "org.jetbrains.exposed:exposed-dao", version.ref = "jetbrains-exposed" }
# Ktorm
ktorm-support-postgresql = { module = "org.ktorm:ktorm-support-postgresql", version.ref = "ktorm" }
# JOOQ
jooq = { module = "org.jooq:jooq", version.ref = "jooq" }
jooq-meta-extensions = { module = "org.jooq:jooq-meta-extensions", version.ref = "jooq" }
# Database
flyway-core = { module = "org.flywaydb:flyway-core", version.ref = "flyway" }
h2-database = { module = "com.h2database:h2", version.ref = "h2database" }
zaxxer-hikari-cp = { module = "com.zaxxer:HikariCP", version.ref = "zaxxer-hikari-cp" }
postgresql-driver = { module = "org.postgresql:postgresql", version.ref = "postgresql-driver" }
# Kafka
kafka-clients = { module = "org.apache.kafka:kafka-clients", version.ref = "kafka" }
kafka-streams = { module = "org.apache.kafka:kafka-streams", version.ref = "kafka" }
kafka-streams-test-utils = { module = "org.apache.kafka:kafka-streams-test-utils", version.ref = "kafka" }
# Thymeleaf
thymeleaf-layout-dialect = { module = "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect", version.ref = "thymeleaf-layout-dialect" }
thymeleaf-extras-spring-security = { module = "org.thymeleaf.extras:thymeleaf-extras-springsecurity6" }
# Webjars
webjars-jquery = { module = "org.webjars:jquery", version.ref = "webjars-jquery" }
webjars-bootstrap = { module = "org.webjars:bootstrap", version.ref = "webjars-bootstrap" }
webjars-popper = { module = "org.webjars:popper.js", version.ref = "webjars-popper" }
webjars-locator = { module = "org.webjars:webjars-locator", version.ref = "webjars-locator" }
webjars-fontawesome = { module = "org.webjars:font-awesome", version.ref = "webjars-fontawesome" }
# GraphQL
graphql-kotlin-ktor-client = { module = "com.expediagroup:graphql-kotlin-ktor-client", version.ref = "graphql" }
graphql-kotlin-ktor-server = { module = "com.expediagroup:graphql-kotlin-ktor-server", version.ref = "graphql" }
graphql-kotlin-client-jackson = { module = "com.expediagroup:graphql-kotlin-client-jackson", version.ref = "graphql" }
# JUnit
junit-bom = { module = "org.junit:junit-bom", version.ref = "junit" }
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter" }
junit-platform-launcher = { module = "org.junit.platform:junit-platform-launcher" }
# Kotest
kotest-runner-junit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotest-assertions-core = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotest-property = { module = "io.kotest:kotest-property", version.ref = "kotest" }
# Mockk
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
# TestContainers
testcontainers-postgresql = { group = "org.testcontainers", name = "postgresql", version.ref = "testcontainers" }

### BUNDLES ###
[bundles]
ktor-server = [
    "ktor-server-core",
    "ktor-server-netty",
    "ktor-server-config-yaml",
    "ktor-server-content-negotiation",
    "ktor-server-request-validation",
    "ktor-server-status-pages"
]
ktor-client = [
    "ktor-client-core",
    "ktor-client-cio",
    "ktor-client-logging",
    "ktor-client-content-negotiation"
]
ktor-serialization-jackson = [
    "ktor-serialization-jackson",
    "jackson-datatype-jsr310"
]
ktor-logging = [
    "ktor-server-call-logging",
    "logback-classic",
    "logstash-logback-encoder"
]
logback = [
    "logback-classic",
    "logstash-logback-encoder"
]
ktor-micrometer = [
    "ktor-server-micrometer",
    "micrometer-prometheus-registry"
]
ktor-opentelemetry = [
    "opentelemetry-kotlin",
    "opentelemetry-instrumentation-annotations",
]
hoplite = [
    "hoplite-yaml"
]
ktor-webjars = [
    "ktor-server-webjars",
    "webjars-jquery",
    "webjars-bootstrap",
    "webjars-popper",
    "webjars-locator",
    "webjars-fontawesome"
]
ktor-thymeleaf = [
    "ktor-server-thymeleaf",
    "thymeleaf-layout-dialect",
]
webjars = [
    "webjars-jquery",
    "webjars-bootstrap",
    "webjars-popper",
    "webjars-locator",
    "webjars-fontawesome"
]
h2-database-support = [
    "zaxxer-hikari-cp",
    "flyway-core",
    "h2-database"
]
kafka = [
    "kafka-clients",
    "kafka-streams"
]
ktor-authentication-sessions = [
    "ktor-server-auth",
    "ktor-server-sessions"
]
ktor-authentication-jwt = [
    "ktor-server-auth",
    "ktor-server-auth-jwt"
]
junit = [
    "kotlin-test-junit",
    "junit-jupiter",
    "junit-platform-launcher"
]
kotest = [
    "kotest-runner-junit5",
    "kotest-assertions-core",
    "kotest-property"
]