[versions]
kotlin = "1.9.23"
ktor = "2.3.11"
spring-boot = "3.2.5"
spring-dependencies = "1.1.4"
jackson = "2.17.1"
logback = "1.5.6"
logstash-logback = "7.4"
micrometer = "1.12.5"
opentelemetry = "1.39.0"
opentelemetry-instrumentation = "2.4.0"
opentelemetry-instrumentation-ktor = "2.4.0-alpha"
hoplite = "2.7.5"
kafka = "3.7.0"
webjars-jquery = "3.7.0"
webjars-bootstrap = "5.3.1"
webjars-popper = "2.11.7"
webjars-locator = "0.47"
webjars-fontawesome = "6.4.2"
junit = "5.10.2"
kotest = "5.9.0"
mockk = "1.13.11"
google-cloud-jib = "3.4.3"
git-properties = "2.4.2"

[plugins]
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
ktor = { id = "io.ktor.plugin", version.ref = "ktor" }
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependencies = { id = "io.spring.dependency-management", version.ref = "spring-dependencies" }
google-cloud-jib = { id = "com.google.cloud.tools.jib", version.ref = "google-cloud-jib" }
git-properties = { id = "com.gorylenko.gradle-git-properties", version.ref = "git-properties" }

[libraries]
# Kotlin
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit" }
# Ktor server
ktor-server-core = { module = "io.ktor:ktor-server-core" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty" }
ktor-server-content-negotiation = { module = "io.ktor:ktor-server-content-negotiation" }
ktor-server-request-validation = { module = "io.ktor:ktor-server-request-validation" }
ktor-server-status-pages = { module = "io.ktor:ktor-server-status-pages" }
ktor-server-config-yaml = { module = "io.ktor:ktor-server-config-yaml" }
ktor-server-webjars = { module = "io.ktor:ktor-server-webjars" }
ktor-server-micrometer = { module = "io.ktor:ktor-server-metrics-micrometer" }
ktor-server-call-logging = { module = "io.ktor:ktor-server-call-logging" }
ktor-server-sessions = { module = "io.ktor:ktor-server-sessions" }
ktor-server-auth = { module = "io.ktor:ktor-server-auth" }
ktor-server-websockets = { module = "io.ktor:ktor-server-websockets" }
ktor-server-tests = { module = "io.ktor:ktor-server-tests" }
ktor-server-test-host = { module = "io.ktor:ktor-server-test-host" }
# Ktor client
ktor-client-core = { module = "io.ktor:ktor-client-core" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation" }
ktor-client-websockets = { module = "io.ktor:ktor-client-websockets" }
# Ktor other
ktor-serialization-jackson = { module = "io.ktor:ktor-serialization-jackson" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json" }
# Spring Boot
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-boot-starter-jdbc = { module = "org.springframework.boot:spring-boot-starter-jdbc" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation" }
spring-boot-starter-thymeleaf = { module = "org.springframework.boot:spring-boot-starter-thymeleaf" }
# Spring Security
spring-security-oauth2-authorization-server = { module = "org.springframework.security:spring-security-oauth2-authorization-server" }
# Jackson
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
# Logback
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
logstash-logback-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstash-logback" }
# Micrometer
micrometer-prometheus-registry = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "micrometer" }
# OpenTelemetry
opentelemetry-kotlin = { module = "io.opentelemetry:opentelemetry-extension-kotlin", version.ref = "opentelemetry" }
opentelemetry-instrumentation-ktor = { module = "io.opentelemetry.instrumentation:opentelemetry-ktor-2.0", version.ref = "opentelemetry-instrumentation-ktor" }
opentelemetry-instrumentation-annotations = { module = "io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations", version.ref = "opentelemetry-instrumentation" }
opentelemetry-java-agent = { module = "io.opentelemetry.javaagent:opentelemetry-javaagent", version.ref = "opentelemetry-instrumentation" }
# Hoplite
hoplite-yaml = { module = "com.sksamuel.hoplite:hoplite-yaml", version.ref = "hoplite" }
# H2
h2-database = { module = "com.h2database:h2" }
# Kafka
kafka-clients = { module = "org.apache.kafka:kafka-clients", version.ref = "kafka" }
kafka-streams = { module = "org.apache.kafka:kafka-streams", version.ref = "kafka" }
kafka-streams-test-utils = { module = "org.apache.kafka:kafka-streams-test-utils", version.ref = "kafka" }
# Thymeleaf
thymeleaf-layout-dialect = { module = "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect" }
thymeleaf-extras-spring-security = { module = "org.thymeleaf.extras:thymeleaf-extras-springsecurity6" }
# Webjars
webjars-jquery = { module = "org.webjars:jquery", version.ref = "webjars-jquery" }
webjars-bootstrap = { module = "org.webjars:bootstrap", version.ref = "webjars-bootstrap" }
webjars-popper = { module = "org.webjars:popper.js", version.ref = "webjars-popper" }
webjars-locator = { module = "org.webjars:webjars-locator", version.ref = "webjars-locator" }
webjars-fontawesome = { module = "org.webjars:font-awesome", version.ref = "webjars-fontawesome" }
# JUnit
junit-bom = { module = "org.junit:junit-bom", version.ref = "junit" }
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter" }
junit-platform-launcher = { module = "org.junit.platform:junit-platform-launcher" }
# Kotest
kotest-runner-junit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotest-assertions-core = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotest-property = { module = "io.kotest:kotest-property", version.ref = "kotest" }
# Mockk
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }

[bundles]
ktor-server = [
    "ktor-server-core",
    "ktor-server-netty",
    "ktor-server-config-yaml",
    "ktor-server-content-negotiation",
    "ktor-server-request-validation",
    "ktor-server-status-pages"
]
ktor-client = [
    "ktor-client-core",
    "ktor-client-cio",
    "ktor-client-logging",
    "ktor-client-content-negotiation"
]
ktor-serialization = [
    "ktor-serialization-jackson",
    "jackson-datatype-jsr310"
]
ktor-logging = [
    "ktor-server-call-logging",
    "logback-classic",
    "logstash-logback-encoder"
]
logback = [
    "logback-classic",
    "logstash-logback-encoder"
]
ktor-micrometer = [
    "ktor-server-micrometer",
    "micrometer-prometheus-registry"
]
ktor-opentelemetry = [
    "opentelemetry-kotlin",
    "opentelemetry-instrumentation-annotations",
]
hoplite = [
    "hoplite-yaml"
]
ktor-webjars = [
    "ktor-server-webjars",
    "webjars-jquery",
    "webjars-bootstrap",
    "webjars-popper",
    "webjars-locator",
    "webjars-fontawesome"
]
webjars = [
    "webjars-jquery",
    "webjars-bootstrap",
    "webjars-popper",
    "webjars-locator",
    "webjars-fontawesome"
]
kafka = [
    "kafka-clients",
    "kafka-streams"
]
ktor-authentication = [
    "ktor-server-sessions",
    "ktor-server-auth"
]
ktor-test = [
    "ktor-server-tests",
    "ktor-server-test-host"
]
junit = [
    "kotlin-test-junit",
    "junit-jupiter",
    "junit-platform-launcher"
]
kotest = [
    "kotest-runner-junit5",
    "kotest-assertions-core",
    "kotest-property"
]